Name: Tianqi Ren
USC NetID: tianqire
CS 455 PA4
Fall 2017

----------------------------------------------
CERTIFY IT'S YOUR WORK

"I certify that the work submitted for this assignment does not
violate USC's student conduct code.  In particular, the work is my
own, not a collaboration, and does not involve code created by other
people, except for the the resources explicitly mentioned in the CS 455
Course Syllabus.  And I did not share my solution or parts of it with
other students in the course."

Initial below to "sign" the above statement:

Tianqi Ren
----------------------------------------------
ACKNOWLEDGE ANY OUTSIDE SOURCES

List here any code you submitted for this assignment that was written
with significant help of a course staff member, or code used from the
textbook.  Be specific about what methods or algorithms are involved,
and what sections of the textbook are involved (if applicable): [you do
not need to list any of the code that we wrote for the assignment,
i.e., the contents of the starter files for the assignment]



----------------------------------------------
KNOWN BUGS or LIMITATIONS:



----------------------------------------------
DESCRIPTION OF YOUR CLASS DESIGN AND ALGORITHMS AND DATA STRUCTURES USED:

AnagramDictionary: Read in file(dictionary) and check if this file exists. If not, throws a filenotfoundexception. Create an anagram dictionary(using a map, in which the key is string, value is a linked list). For each word, they are stored in the same list if they are anagram. The key is their sorted result, according to natural order. This class also contains a getAnagramof function, which returns all the agagram words of a specific word. 

Rack: Return the subsets of a word.

ScoreTable: In this class, there is a hard-coded map of letters. A function to calculate character's score and word's score.

WordFind: Includes main function to run the rack game. First, it uses AnagramDictionary to create a dictionary. If the file does not exist, show the message and exit. Then, prompts for user to input a word. Creates subsets of this word. For every possible word in subsets, calculate its score if it is in dictionary. Finally, create a list, sort all results, and print them.

----------------------------------------------
ANY OTHER NOTES FOR THE GRADER:







