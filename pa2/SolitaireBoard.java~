package pa2;

//Name: Tianqi Ren
//USC NetID:4080641619 
//CSCI455 PA2
//Fall 2017

import java.util.ArrayList;
import java.util.Random;

/*
class SolitaireBoard
The board for Bulgarian Solitaire.  You can change what the total number of cards is for the game
by changing NUM_FINAL_PILES, below.  Don't change CARD_TOTAL directly, because there are only some values
for CARD_TOTAL that result in a game that terminates.
(See comments below next to named constant declarations for more details on this.)
*/


public class SolitaireBoard {

	public static final int NUM_FINAL_PILES = 9;
// number of piles in a final configuration
// (note: if NUM_FINAL_PILES is 9, then CARD_TOTAL below will be 45)

	public static final int CARD_TOTAL = NUM_FINAL_PILES * (NUM_FINAL_PILES + 1) / 2;
// bulgarian solitaire only terminates if CARD_TOTAL is a triangular number.
// see: http://en.wikipedia.org/wiki/Bulgarian_solitaire for more details
// the above formula is the closed form for 1 + 2 + 3 + . . . + NUM_FINAL_PILES

 // Note to students: you may not use an ArrayList -- see assgt description for details.


/**
   	Representation invariant:
	1. numBoard <= CARD_TOTAL;
	2. each value of board should greater than 0 and less than or equal to 45;
	3. The old piles left will be in the same relative order as before, and the new pile will be at the end.
	<put rep. invar. comment here>

 */

	private int[] board;					//arrays to store piles
	private int numBoard;				//record the current index of boards

/**
  Creates a solitaire board with the configuration specified in piles.
  piles has the number of cards in the first pile, then the number of cards in the second pile, etc.
  PRE: piles contains a sequence of positive numbers that sum to SolitaireBoard.CARD_TOTAL
*/
public SolitaireBoard(ArrayList<Integer> piles) {
	board = new int[CARD_TOTAL+1];					//in case forty-five 1's
	numBoard = piles.size();
	for(int i=0;i<piles.size();i++) {
		board[i] = piles.get(i);
	}
    assert isValidSolitaireBoard();   
}


/**
   Creates a solitaire board with a random initial configuration.
*/
public SolitaireBoard() {
	board = new int[CARD_TOTAL];
	numBoard = 0;
	Random rand = new Random();
	int sum = CARD_TOTAL;
	while(sum > 0) {
		board[numBoard] = rand.nextInt(sum) + 1;
		sum -= board[numBoard];
		numBoard++;
	}
	assert isValidSolitaireBoard();
}


/**
   Plays one round of Bulgarian solitaire.  Updates the configuration according to the rules
   of Bulgarian solitaire: Takes one card from each pile, and puts them all together in a new pile.
   The old piles that are left will be in the same relative order as before, 
   and the new pile will be at the end.
 */
public void playRound() {
	if(numBoard == CARD_TOTAL) {			//special case, more efficient
		board[0] = CARD_TOTAL;
		numBoard = 1;
	}else {
		for(int i=0;i<numBoard;i++) {
			board[i]--;
		}
		board[numBoard] = numBoard;
		numBoard ++;
		for(int j=0;j<numBoard;j++) {
			while(board[j] == 0) {
				for(int k=j;k<numBoard;k++) {
					board[k] = board[k+1];
				}
				numBoard--;
			}
		}
	}
	assert isValidSolitaireBoard();
}

/**
   Returns true iff the current board is at the end of the game.  That is, there are NUM_FINAL_PILES
   piles that are of sizes 1, 2, 3, . . . , NUM_FINAL_PILES, in any order.
 */

public boolean isDone() {
	assert isValidSolitaireBoard();
	if(numBoard != NUM_FINAL_PILES) {
		return false;
	}
	int sum = 0;
	int[] help = new int[CARD_TOTAL+1];					// to avoid arrayIndexOutOfBoundsException
	for(int i=0;i<board.length;i++) {
		help[board[i]] = 1;
	}
	for(int i=1;i<=NUM_FINAL_PILES;i++) {
		if(help[i]==1) {
			sum++;
		}
	}
	if(sum == NUM_FINAL_PILES) {
		return true;
	}
    return false;  
}


/**
   Returns current board configuration as a string with the format of
   a space-separated list of numbers with no leading or trailing spaces.
   The numbers represent the number of cards in each non-empty pile.
 */
public String configString() {
	String result = "" + board[0];
	for(int i=1;i<numBoard;i++) {
		result += " " + board[i];
	}
	assert isValidSolitaireBoard();
    return result;   
}


/**
   Returns true iff the solitaire board data is in a valid state
   (See representation invariant comment for more details.)
 */
private boolean isValidSolitaireBoard() {
	if(numBoard > CARD_TOTAL) {
		return false;											//rep. invr. #1.
	}
	int sum = 0;
	for(int i=0;i<numBoard;i++) {
		if(board[i] <= 0 || board[i] > 45) {
			 return false;										//rep. invr. #2.
		}
		sum += board[i];	
	}
	if(sum != CARD_TOTAL) {
		return false;
	}
	return true;
}			

}
